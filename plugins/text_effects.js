const {
    plugin,
    mode
} = require('../lib');
const { CMD_NAME } = require('../config');
plugin({
    pattern: 'fancy ?(.*)',
    desc: 'Convert text to fancy styles',
    react: "‚ú®",
    type: "converter",
    fromMe: mode
}, async (message, match) => {
    try {
        if (!match) {
            return await message.send("‚ú® *FANCY TEXT GENERATOR* ‚ú®\n\nUsage: .fancy your text here\n\nExample: .fancy Hello World");
        }

        const text = match;
        const styles = {
            "ùóïùóºùóπùó±": text.replace(/[a-zA-Z0-9]/g, char => {
                if (char >= 'a' && char <= 'z') return String.fromCharCode(0x1D5EE + char.charCodeAt(0) - 97);
                if (char >= 'A' && char <= 'Z') return String.fromCharCode(0x1D5D4 + char.charCodeAt(0) - 65);
                if (char >= '0' && char <= '9') return String.fromCharCode(0x1D7EC + char.charCodeAt(0) - 48);
                return char;
            }),
            "ùòêùòµùò¢ùò≠ùò™ùò§": text.replace(/[a-zA-Z]/g, char => {
                if (char >= 'a' && char <= 'z') return String.fromCharCode(0x1D622 + char.charCodeAt(0) - 97);
                if (char >= 'A' && char <= 'Z') return String.fromCharCode(0x1D608 + char.charCodeAt(0) - 65);
                return char;
            }),
            "ùíÆùí∏ùìáùíæùìÖùìâ": text.replace(/[a-zA-Z]/g, char => {
                if (char >= 'a' && char <= 'z') return String.fromCharCode(0x1D4B6 + char.charCodeAt(0) - 97);
                if (char >= 'A' && char <= 'Z') return String.fromCharCode(0x1D49C + char.charCodeAt(0) - 65);
                return char;
            }),
            "·¥õ…™…¥ è ·¥Ñ·¥Ä·¥òÍú±": text.replace(/[a-zA-Z]/g, char => {
                const tiny = "·¥Ä ô·¥Ñ·¥Ö·¥áÍú∞…¢ ú…™·¥ä·¥ã ü·¥ç…¥·¥è·¥ò«´ ÄÍú±·¥õ·¥ú·¥†·¥°x è·¥¢";
                if (char >= 'a' && char <= 'z') return tiny[char.charCodeAt(0) - 97];
                if (char >= 'A' && char <= 'Z') return tiny[char.charCodeAt(0) - 65];
                return char;
            }),
            "üÖ±üÖªüÖæüÖ≤üÖ∫üÜÇ": text.replace(/[a-zA-Z]/g, char => {
                if (char >= 'a' && char <= 'z') return String.fromCharCode(0x1F170 + char.charCodeAt(0) - 97);
                if (char >= 'A' && char <= 'Z') return String.fromCharCode(0x1F170 + char.charCodeAt(0) - 65);
                return char;
            }).replace(/[0-9]/g, char => String.fromCharCode(0x1F1E6 + char.charCodeAt(0) - 48))
        };

        let result = "‚ú® *FANCY TEXT STYLES* ‚ú®\n\n";
        result += `*Original:* ${text}\n\n`;

        for (const [styleName, styledText] of Object.entries(styles)) {
            result += `*${styleName}:* ${styledText}\n\n`;
        }

        result += `> *${CMD_NAME}*`;

        await message.send(result);
    } catch (error) {
        console.error("‚ùå Error in .fancy command:", error);
        await message.send("‚ùå *Error occurred while generating fancy text.*");
    }
});

plugin({
    pattern: 'bubble ?(.*)',
    desc: 'Convert text to bubble letters',
    react: "ü´ß",
    type: "converter",
    fromMe: mode
}, async (message, match) => {
    try {
        if (!match) {
            return await message.send("ü´ß *BUBBLE TEXT* ü´ß\n\nUsage: .bubble your text here\n\nExample: .bubble Hello");
        }

        const bubbleMap = {
            'a': '‚ìê', 'b': '‚ìë', 'c': '‚ìí', 'd': '‚ìì', 'e': '‚ìî', 'f': '‚ìï', 'g': '‚ìñ', 'h': '‚ìó', 'i': '‚ìò',
            'j': '‚ìô', 'k': '‚ìö', 'l': '‚ìõ', 'm': '‚ìú', 'n': '‚ìù', 'o': '‚ìû', 'p': '‚ìü', 'q': '‚ì†', 'r': '‚ì°',
            's': '‚ì¢', 't': '‚ì£', 'u': '‚ì§', 'v': '‚ì•', 'w': '‚ì¶', 'x': '‚ìß', 'y': '‚ì®', 'z': '‚ì©',
            'A': '‚í∂', 'B': '‚í∑', 'C': '‚í∏', 'D': '‚íπ', 'E': '‚í∫', 'F': '‚íª', 'G': '‚íº', 'H': '‚íΩ', 'I': '‚íæ',
            'J': '‚íø', 'K': '‚ìÄ', 'L': '‚ìÅ', 'M': '‚ìÇ', 'N': '‚ìÉ', 'O': '‚ìÑ', 'P': '‚ìÖ', 'Q': '‚ìÜ', 'R': '‚ìá',
            'S': '‚ìà', 'T': '‚ìâ', 'U': '‚ìä', 'V': '‚ìã', 'W': '‚ìå', 'X': '‚ìç', 'Y': '‚ìé', 'Z': '‚ìè',
            '0': '‚ì™', '1': '‚ë†', '2': '‚ë°', '3': '‚ë¢', '4': '‚ë£', '5': '‚ë§', '6': '‚ë•', '7': '‚ë¶', '8': '‚ëß', '9': '‚ë®'
        };

        const bubbleText = match.split('').map(char => bubbleMap[char] || char).join('');

        await message.send(`ü´ß *BUBBLE TEXT* ü´ß\n\n*Original:* ${match}\n*Bubble:* ${bubbleText}\n\n> *${CMD_NAME}*`);
    } catch (error) {
        console.error("‚ùå Error in .bubble command:", error);
        await message.send("‚ùå *Error occurred while generating bubble text.*");
    }
});

plugin({
    pattern: 'reverse ?(.*)',
    desc: 'Reverse text',
    react: "üîÑ",
    type: "converter",
    fromMe: mode
}, async (message, match) => {
    try {
        const text = match || message.reply_message?.text;

        if (!text) {
            return await message.send("üîÑ *TEXT REVERSER* üîÑ\n\nUsage: .reverse your text here\nOr reply to a message with .reverse");
        }

        const reversed = text.split('').reverse().join('');

        await message.send(`üîÑ *TEXT REVERSER* üîÑ\n\n*Original:* ${text}\n*Reversed:* ${reversed}\n\n> *${CMD_NAME}*`);
    } catch (error) {
        console.error("‚ùå Error in .reverse command:", error);
        await message.send("‚ùå *Error occurred while reversing text.*");
    }
});

plugin({
    pattern: 'mock ?(.*)',
    desc: 'Convert text to mocking SpongeBob style',
    react: "ü§°",
    type: "converter",
    fromMe: mode
}, async (message, match) => {
    try {
        const text = match || message.reply_message?.text;

        if (!text) {
            return await message.send("ü§° *MOCKING TEXT* ü§°\n\nUsage: .mock your text here\nOr reply to a message with .mock");
        }

        const mockText = text.split('').map((char, index) => {
            if (char.match(/[a-zA-Z]/)) {
                return index % 2 === 0 ? char.toLowerCase() : char.toUpperCase();
            }
            return char;
        }).join('');

        await message.send(`ü§° *MOCKING SPONGEBOB* ü§°\n\n*Original:* ${text}\n*Mocked:* ${mockText}\n\n> *${CMD_NAME}*`);
    } catch (error) {
        console.error("‚ùå Error in .mock command:", error);
        await message.send("‚ùå *Error occurred while mocking text.*");
    }
});

plugin({
    pattern: 'aesthetic ?(.*)',
    desc: 'Convert text to aesthetic style',
    react: "üå∏",
    type: "converter",
    fromMe: mode
}, async (message, match) => {
    try {
        if (!match) {
            return await message.send("üå∏ *AESTHETIC TEXT* üå∏\n\nUsage: .aesthetic your text here\n\nExample: .aesthetic love yourself");
        }

        const aesthetic = match.split('').join(' ').toUpperCase();
        const vaporwave = match.replace(/[a-zA-Z0-9]/g, char => {
            if (char >= 'a' && char <= 'z') return String.fromCharCode(0xFF41 + char.charCodeAt(0) - 97);
            if (char >= 'A' && char <= 'Z') return String.fromCharCode(0xFF21 + char.charCodeAt(0) - 65);
            if (char >= '0' && char <= '9') return String.fromCharCode(0xFF10 + char.charCodeAt(0) - 48);
            return char;
        });

        let result = "üå∏ *AESTHETIC STYLES* üå∏\n\n";
        result += `*Original:* ${match}\n\n`;
        result += `*Spaced:* ${aesthetic}\n\n`;
        result += `*Vaporwave:* ${vaporwave}\n\n`;
        result += `*With Symbols:* „Éª‚ùÄ„Éª${match}„Éª‚ùÄ„Éª\n\n`;
        result += `*Kawaii:* (‚óï‚Äø‚óï) ${match} (‚óï‚Äø‚óï)\n\n`;
        result += `> *${CMD_NAME}*`;

        await message.send(result);
    } catch (error) {
        console.error("‚ùå Error in .aesthetic command:", error);
        await message.send("‚ùå *Error occurred while generating aesthetic text.*");
    }
});